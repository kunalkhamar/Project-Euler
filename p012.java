/**

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

 */


import java.util.HashMap;
import java.util.Map;

public class p012 {

	// a prime factorization (p.f.) is of form 
	// { (p_1 => count(p_1)), (p_2 => count(p_2)), ... , (p_k => count(p_k)) }
	//   where p_1 ... p_k are the prime factors of n
	// 1 and n itself do not appear in the p.f.
	private static Map<Integer, Integer> getPrimeFactorization(int n) {
		Map<Integer, Integer> factors = new HashMap<>();
		int max = (int) Math.ceil(Math.sqrt(n));
		for (int i = 2; i <= max; i++) {
			int occur = 0;
			while (n % i == 0) {
				n /= i;
				occur++;
			}
			factors.put(i, occur);
		}
		return factors;
	}
	
	// pf is a prime factorization
	private static int getNumFactors(Map<Integer, Integer> pf) {
		int num = 1;
		for (Integer v : pf.values())
			num *= (v + 1);
		return num;
	}

	public static void main(String[] args) {
		int pos = 7;
		int val = 28;
		
		// naive brute force suffices
		while (true) {
			++pos;
			val += pos;
			if (getNumFactors(getPrimeFactorization(val)) > 500)
				break;
		}
		System.out.println(val);
	}
	
}
